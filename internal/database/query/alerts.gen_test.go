// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"fmt"
	"strconv"
	"testing"
	"time"

	"github.com/watchedsky-social/core/internal/database/models"
	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gorm/clause"
)

func init() {
	InitializeDB()
	err := _gen_test_db.AutoMigrate(&models.Alert{})
	if err != nil {
		fmt.Printf("Error: AutoMigrate(&models.Alert{}) fail: %s", err)
	}
}

func Test_alertQuery(t *testing.T) {
	alert := newAlert(_gen_test_db)
	alert = *alert.As(alert.TableName())
	_do := alert.WithContext(context.Background()).Debug()

	primaryKey := field.NewString(alert.TableName(), clause.PrimaryKey)
	_, err := _do.Unscoped().Where(primaryKey.IsNotNull()).Delete()
	if err != nil {
		t.Error("clean table <alerts> fail:", err)
		return
	}

	_, ok := alert.GetFieldByName("")
	if ok {
		t.Error("GetFieldByName(\"\") from alert success")
	}

	err = _do.Create(&models.Alert{})
	if err != nil {
		t.Error("create item in table <alerts> fail:", err)
	}

	err = _do.Save(&models.Alert{})
	if err != nil {
		t.Error("create item in table <alerts> fail:", err)
	}

	err = _do.CreateInBatches([]*models.Alert{{}, {}}, 10)
	if err != nil {
		t.Error("create item in table <alerts> fail:", err)
	}

	_, err = _do.Select(alert.ALL).Take()
	if err != nil {
		t.Error("Take() on table <alerts> fail:", err)
	}

	_, err = _do.First()
	if err != nil {
		t.Error("First() on table <alerts> fail:", err)
	}

	_, err = _do.Last()
	if err != nil {
		t.Error("First() on table <alerts> fail:", err)
	}

	_, err = _do.Where(primaryKey.IsNotNull()).FindInBatch(10, func(tx gen.Dao, batch int) error { return nil })
	if err != nil {
		t.Error("FindInBatch() on table <alerts> fail:", err)
	}

	err = _do.Where(primaryKey.IsNotNull()).FindInBatches(&[]*models.Alert{}, 10, func(tx gen.Dao, batch int) error { return nil })
	if err != nil {
		t.Error("FindInBatches() on table <alerts> fail:", err)
	}

	_, err = _do.Select(alert.ALL).Where(primaryKey.IsNotNull()).Order(primaryKey.Desc()).Find()
	if err != nil {
		t.Error("Find() on table <alerts> fail:", err)
	}

	_, err = _do.Distinct(primaryKey).Take()
	if err != nil {
		t.Error("select Distinct() on table <alerts> fail:", err)
	}

	_, err = _do.Select(alert.ALL).Omit(primaryKey).Take()
	if err != nil {
		t.Error("Omit() on table <alerts> fail:", err)
	}

	_, err = _do.Group(primaryKey).Find()
	if err != nil {
		t.Error("Group() on table <alerts> fail:", err)
	}

	_, err = _do.Scopes(func(dao gen.Dao) gen.Dao { return dao.Where(primaryKey.IsNotNull()) }).Find()
	if err != nil {
		t.Error("Scopes() on table <alerts> fail:", err)
	}

	_, _, err = _do.FindByPage(0, 1)
	if err != nil {
		t.Error("FindByPage() on table <alerts> fail:", err)
	}

	_, err = _do.ScanByPage(&models.Alert{}, 0, 1)
	if err != nil {
		t.Error("ScanByPage() on table <alerts> fail:", err)
	}

	_, err = _do.Attrs(primaryKey).Assign(primaryKey).FirstOrInit()
	if err != nil {
		t.Error("FirstOrInit() on table <alerts> fail:", err)
	}

	_, err = _do.Attrs(primaryKey).Assign(primaryKey).FirstOrCreate()
	if err != nil {
		t.Error("FirstOrCreate() on table <alerts> fail:", err)
	}

	var _a _another
	var _aPK = field.NewString(_a.TableName(), "id")

	err = _do.Join(&_a, primaryKey.EqCol(_aPK)).Scan(map[string]interface{}{})
	if err != nil {
		t.Error("Join() on table <alerts> fail:", err)
	}

	err = _do.LeftJoin(&_a, primaryKey.EqCol(_aPK)).Scan(map[string]interface{}{})
	if err != nil {
		t.Error("LeftJoin() on table <alerts> fail:", err)
	}

	_, err = _do.Not().Or().Clauses().Take()
	if err != nil {
		t.Error("Not/Or/Clauses on table <alerts> fail:", err)
	}
}

var AlertInsertOptimizedAlertTestCase = []TestCase{}

func Test_alert_InsertOptimizedAlert(t *testing.T) {
	alert := newAlert(_gen_test_db)
	do := alert.WithContext(context.Background()).Debug()

	for i, tt := range AlertInsertOptimizedAlertTestCase {
		t.Run("InsertOptimizedAlert_"+strconv.Itoa(i), func(t *testing.T) {
			res1 := do.InsertOptimizedAlert(tt.Input.Args[0].(string), tt.Input.Args[1].(string), tt.Input.Args[2].(string), tt.Input.Args[3].(string), tt.Input.Args[4].(*string), tt.Input.Args[5].(*string), tt.Input.Args[6].(*string), tt.Input.Args[7].(*string), tt.Input.Args[8].(time.Time), tt.Input.Args[9].(time.Time), tt.Input.Args[10].(*time.Time), tt.Input.Args[11].(*time.Time), tt.Input.Args[12].(*time.Time), tt.Input.Args[13].(*models.StringSlice), tt.Input.Args[14].(*models.Geometry), tt.Input.Args[15].(*string))
			assert(t, "InsertOptimizedAlert", res1, tt.Expectation.Ret[0])
		})
	}
}

var AlertGetCustomAlertURIsTestCase = []TestCase{}

func Test_alert_GetCustomAlertURIs(t *testing.T) {
	alert := newAlert(_gen_test_db)
	do := alert.WithContext(context.Background()).Debug()

	for i, tt := range AlertGetCustomAlertURIsTestCase {
		t.Run("GetCustomAlertURIs_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.GetCustomAlertURIs(tt.Input.Args[0].(string), tt.Input.Args[1].(uint))
			assert(t, "GetCustomAlertURIs", res1, tt.Expectation.Ret[0])
			assert(t, "GetCustomAlertURIs", res2, tt.Expectation.Ret[1])
		})
	}
}

var AlertGetCustomAlertURIsWithCursorTestCase = []TestCase{}

func Test_alert_GetCustomAlertURIsWithCursor(t *testing.T) {
	alert := newAlert(_gen_test_db)
	do := alert.WithContext(context.Background()).Debug()

	for i, tt := range AlertGetCustomAlertURIsWithCursorTestCase {
		t.Run("GetCustomAlertURIsWithCursor_"+strconv.Itoa(i), func(t *testing.T) {
			res1, res2 := do.GetCustomAlertURIsWithCursor(tt.Input.Args[0].(string), tt.Input.Args[1].(uint), tt.Input.Args[2].(uint))
			assert(t, "GetCustomAlertURIsWithCursor", res1, tt.Expectation.Ret[0])
			assert(t, "GetCustomAlertURIsWithCursor", res2, tt.Expectation.Ret[1])
		})
	}
}
