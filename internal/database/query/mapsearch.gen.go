// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/watchedsky-social/core/internal/database/models"
)

func newMapsearch(db *gorm.DB, opts ...gen.DOOption) mapsearch {
	_mapsearch := mapsearch{}

	_mapsearch.mapsearchDo.UseDB(db, opts...)
	_mapsearch.mapsearchDo.UseModel(&models.Mapsearch{})

	tableName := _mapsearch.mapsearchDo.TableName()
	_mapsearch.ALL = field.NewAsterisk(tableName)
	_mapsearch.ID = field.NewString(tableName, "id")
	_mapsearch.Name = field.NewString(tableName, "name")
	_mapsearch.State = field.NewString(tableName, "state")
	_mapsearch.County = field.NewString(tableName, "county")
	_mapsearch.Centroid = field.NewField(tableName, "centroid")

	_mapsearch.fillFieldMap()

	return _mapsearch
}

type mapsearch struct {
	mapsearchDo mapsearchDo

	ALL      field.Asterisk
	ID       field.String
	Name     field.String
	State    field.String
	County   field.String
	Centroid field.Field

	fieldMap map[string]field.Expr
}

func (m mapsearch) Table(newTableName string) *mapsearch {
	m.mapsearchDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mapsearch) As(alias string) *mapsearch {
	m.mapsearchDo.DO = *(m.mapsearchDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mapsearch) updateTableName(table string) *mapsearch {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewString(table, "id")
	m.Name = field.NewString(table, "name")
	m.State = field.NewString(table, "state")
	m.County = field.NewString(table, "county")
	m.Centroid = field.NewField(table, "centroid")

	m.fillFieldMap()

	return m
}

func (m *mapsearch) WithContext(ctx context.Context) IMapsearchDo {
	return m.mapsearchDo.WithContext(ctx)
}

func (m mapsearch) TableName() string { return m.mapsearchDo.TableName() }

func (m mapsearch) Alias() string { return m.mapsearchDo.Alias() }

func (m mapsearch) Columns(cols ...field.Expr) gen.Columns { return m.mapsearchDo.Columns(cols...) }

func (m *mapsearch) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mapsearch) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 5)
	m.fieldMap["id"] = m.ID
	m.fieldMap["name"] = m.Name
	m.fieldMap["state"] = m.State
	m.fieldMap["county"] = m.County
	m.fieldMap["centroid"] = m.Centroid
}

func (m mapsearch) clone(db *gorm.DB) mapsearch {
	m.mapsearchDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mapsearch) replaceDB(db *gorm.DB) mapsearch {
	m.mapsearchDo.ReplaceDB(db)
	return m
}

type mapsearchDo struct{ gen.DO }

type IMapsearchDo interface {
	gen.SubQuery
	Debug() IMapsearchDo
	WithContext(ctx context.Context) IMapsearchDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMapsearchDo
	WriteDB() IMapsearchDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMapsearchDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMapsearchDo
	Not(conds ...gen.Condition) IMapsearchDo
	Or(conds ...gen.Condition) IMapsearchDo
	Select(conds ...field.Expr) IMapsearchDo
	Where(conds ...gen.Condition) IMapsearchDo
	Order(conds ...field.Expr) IMapsearchDo
	Distinct(cols ...field.Expr) IMapsearchDo
	Omit(cols ...field.Expr) IMapsearchDo
	Join(table schema.Tabler, on ...field.Expr) IMapsearchDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMapsearchDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMapsearchDo
	Group(cols ...field.Expr) IMapsearchDo
	Having(conds ...gen.Condition) IMapsearchDo
	Limit(limit int) IMapsearchDo
	Offset(offset int) IMapsearchDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMapsearchDo
	Unscoped() IMapsearchDo
	Create(values ...*models.Mapsearch) error
	CreateInBatches(values []*models.Mapsearch, batchSize int) error
	Save(values ...*models.Mapsearch) error
	First() (*models.Mapsearch, error)
	Take() (*models.Mapsearch, error)
	Last() (*models.Mapsearch, error)
	Find() ([]*models.Mapsearch, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Mapsearch, err error)
	FindInBatches(result *[]*models.Mapsearch, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Mapsearch) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMapsearchDo
	Assign(attrs ...field.AssignExpr) IMapsearchDo
	Joins(fields ...field.RelationField) IMapsearchDo
	Preload(fields ...field.RelationField) IMapsearchDo
	FirstOrInit() (*models.Mapsearch, error)
	FirstOrCreate() (*models.Mapsearch, error)
	FindByPage(offset int, limit int) (result []*models.Mapsearch, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMapsearchDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	PrefixSearch(searchText string) (result []*models.Mapsearch, err error)
}

// WITH searchResults AS (
//
//	    SELECT * FROM mapsearch
//	        WHERE display_name ILIKE @searchText || '%' OR id LIKE @searchText || '%'
//	    )
//	SELECT DISTINCT ON (display_name) id, name, state, county, centroid
//	    FROM searchResults ORDER by display_name;
func (m mapsearchDo) PrefixSearch(searchText string) (result []*models.Mapsearch, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, searchText)
	params = append(params, searchText)
	generateSQL.WriteString("WITH searchResults AS ( SELECT * FROM mapsearch WHERE display_name ILIKE ? || '%' OR id LIKE ? || '%' ) SELECT DISTINCT ON (display_name) id, name, state, county, centroid FROM searchResults ORDER by display_name; ")

	var executeSQL *gorm.DB
	executeSQL = m.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (m mapsearchDo) Debug() IMapsearchDo {
	return m.withDO(m.DO.Debug())
}

func (m mapsearchDo) WithContext(ctx context.Context) IMapsearchDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mapsearchDo) ReadDB() IMapsearchDo {
	return m.Clauses(dbresolver.Read)
}

func (m mapsearchDo) WriteDB() IMapsearchDo {
	return m.Clauses(dbresolver.Write)
}

func (m mapsearchDo) Session(config *gorm.Session) IMapsearchDo {
	return m.withDO(m.DO.Session(config))
}

func (m mapsearchDo) Clauses(conds ...clause.Expression) IMapsearchDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mapsearchDo) Returning(value interface{}, columns ...string) IMapsearchDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mapsearchDo) Not(conds ...gen.Condition) IMapsearchDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mapsearchDo) Or(conds ...gen.Condition) IMapsearchDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mapsearchDo) Select(conds ...field.Expr) IMapsearchDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mapsearchDo) Where(conds ...gen.Condition) IMapsearchDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mapsearchDo) Order(conds ...field.Expr) IMapsearchDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mapsearchDo) Distinct(cols ...field.Expr) IMapsearchDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mapsearchDo) Omit(cols ...field.Expr) IMapsearchDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mapsearchDo) Join(table schema.Tabler, on ...field.Expr) IMapsearchDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mapsearchDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMapsearchDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mapsearchDo) RightJoin(table schema.Tabler, on ...field.Expr) IMapsearchDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mapsearchDo) Group(cols ...field.Expr) IMapsearchDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mapsearchDo) Having(conds ...gen.Condition) IMapsearchDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mapsearchDo) Limit(limit int) IMapsearchDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mapsearchDo) Offset(offset int) IMapsearchDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mapsearchDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMapsearchDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mapsearchDo) Unscoped() IMapsearchDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mapsearchDo) Create(values ...*models.Mapsearch) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mapsearchDo) CreateInBatches(values []*models.Mapsearch, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mapsearchDo) Save(values ...*models.Mapsearch) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mapsearchDo) First() (*models.Mapsearch, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Mapsearch), nil
	}
}

func (m mapsearchDo) Take() (*models.Mapsearch, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Mapsearch), nil
	}
}

func (m mapsearchDo) Last() (*models.Mapsearch, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Mapsearch), nil
	}
}

func (m mapsearchDo) Find() ([]*models.Mapsearch, error) {
	result, err := m.DO.Find()
	return result.([]*models.Mapsearch), err
}

func (m mapsearchDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Mapsearch, err error) {
	buf := make([]*models.Mapsearch, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mapsearchDo) FindInBatches(result *[]*models.Mapsearch, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mapsearchDo) Attrs(attrs ...field.AssignExpr) IMapsearchDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mapsearchDo) Assign(attrs ...field.AssignExpr) IMapsearchDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mapsearchDo) Joins(fields ...field.RelationField) IMapsearchDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mapsearchDo) Preload(fields ...field.RelationField) IMapsearchDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mapsearchDo) FirstOrInit() (*models.Mapsearch, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Mapsearch), nil
	}
}

func (m mapsearchDo) FirstOrCreate() (*models.Mapsearch, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Mapsearch), nil
	}
}

func (m mapsearchDo) FindByPage(offset int, limit int) (result []*models.Mapsearch, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mapsearchDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mapsearchDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mapsearchDo) Delete(models ...*models.Mapsearch) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mapsearchDo) withDO(do gen.Dao) *mapsearchDo {
	m.DO = *do.(*gen.DO)
	return m
}
