// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/watchedsky-social/core/internal/database/models"
)

func newZone(db *gorm.DB, opts ...gen.DOOption) zone {
	_zone := zone{}

	_zone.zoneDo.UseDB(db, opts...)
	_zone.zoneDo.UseModel(&models.Zone{})

	tableName := _zone.zoneDo.TableName()
	_zone.ALL = field.NewAsterisk(tableName)
	_zone.ID = field.NewString(tableName, "id")
	_zone.Name = field.NewString(tableName, "name")
	_zone.Type = field.NewString(tableName, "type")
	_zone.State = field.NewString(tableName, "state")
	_zone.Border = field.NewField(tableName, "border")

	_zone.fillFieldMap()

	return _zone
}

type zone struct {
	zoneDo zoneDo

	ALL    field.Asterisk
	ID     field.String
	Name   field.String
	Type   field.String
	State  field.String
	Border field.Field

	fieldMap map[string]field.Expr
}

func (z zone) Table(newTableName string) *zone {
	z.zoneDo.UseTable(newTableName)
	return z.updateTableName(newTableName)
}

func (z zone) As(alias string) *zone {
	z.zoneDo.DO = *(z.zoneDo.As(alias).(*gen.DO))
	return z.updateTableName(alias)
}

func (z *zone) updateTableName(table string) *zone {
	z.ALL = field.NewAsterisk(table)
	z.ID = field.NewString(table, "id")
	z.Name = field.NewString(table, "name")
	z.Type = field.NewString(table, "type")
	z.State = field.NewString(table, "state")
	z.Border = field.NewField(table, "border")

	z.fillFieldMap()

	return z
}

func (z *zone) WithContext(ctx context.Context) IZoneDo { return z.zoneDo.WithContext(ctx) }

func (z zone) TableName() string { return z.zoneDo.TableName() }

func (z zone) Alias() string { return z.zoneDo.Alias() }

func (z zone) Columns(cols ...field.Expr) gen.Columns { return z.zoneDo.Columns(cols...) }

func (z *zone) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := z.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (z *zone) fillFieldMap() {
	z.fieldMap = make(map[string]field.Expr, 5)
	z.fieldMap["id"] = z.ID
	z.fieldMap["name"] = z.Name
	z.fieldMap["type"] = z.Type
	z.fieldMap["state"] = z.State
	z.fieldMap["border"] = z.Border
}

func (z zone) clone(db *gorm.DB) zone {
	z.zoneDo.ReplaceConnPool(db.Statement.ConnPool)
	return z
}

func (z zone) replaceDB(db *gorm.DB) zone {
	z.zoneDo.ReplaceDB(db)
	return z
}

type zoneDo struct{ gen.DO }

type IZoneDo interface {
	gen.SubQuery
	Debug() IZoneDo
	WithContext(ctx context.Context) IZoneDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IZoneDo
	WriteDB() IZoneDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IZoneDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IZoneDo
	Not(conds ...gen.Condition) IZoneDo
	Or(conds ...gen.Condition) IZoneDo
	Select(conds ...field.Expr) IZoneDo
	Where(conds ...gen.Condition) IZoneDo
	Order(conds ...field.Expr) IZoneDo
	Distinct(cols ...field.Expr) IZoneDo
	Omit(cols ...field.Expr) IZoneDo
	Join(table schema.Tabler, on ...field.Expr) IZoneDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IZoneDo
	RightJoin(table schema.Tabler, on ...field.Expr) IZoneDo
	Group(cols ...field.Expr) IZoneDo
	Having(conds ...gen.Condition) IZoneDo
	Limit(limit int) IZoneDo
	Offset(offset int) IZoneDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IZoneDo
	Unscoped() IZoneDo
	Create(values ...*models.Zone) error
	CreateInBatches(values []*models.Zone, batchSize int) error
	Save(values ...*models.Zone) error
	First() (*models.Zone, error)
	Take() (*models.Zone, error)
	Last() (*models.Zone, error)
	Find() ([]*models.Zone, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Zone, err error)
	FindInBatches(result *[]*models.Zone, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Zone) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IZoneDo
	Assign(attrs ...field.AssignExpr) IZoneDo
	Joins(fields ...field.RelationField) IZoneDo
	Preload(fields ...field.RelationField) IZoneDo
	FirstOrInit() (*models.Zone, error)
	FirstOrCreate() (*models.Zone, error)
	FindByPage(offset int, limit int) (result []*models.Zone, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IZoneDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	CountVisibleZones(southEast models.Geometry, northWest models.Geometry) (result int64, err error)
	ShowVisibleZones(southEast models.Geometry, northWest models.Geometry) (result []*models.Zone, err error)
	ListIDs() (result []string, err error)
	FindCongruentZones(zoneList []string) (result []string, err error)
	ResolveGeometry(affectedZones []string) (result *models.Geometry, err error)
}

// SELECT count(*) FROM zones WHERE ST_Intersects(border, ST_SetSRID(ST_MakeBox2D(@southEast, @northWest), 4326));
func (z zoneDo) CountVisibleZones(southEast models.Geometry, northWest models.Geometry) (result int64, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, southEast)
	params = append(params, northWest)
	generateSQL.WriteString("SELECT count(*) FROM zones WHERE ST_Intersects(border, ST_SetSRID(ST_MakeBox2D(?, ?), 4326)); ")

	var executeSQL *gorm.DB
	executeSQL = z.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM zones WHERE type='county' AND ST_Intersects(border, ST_SetSRID(ST_MakeBox2D(@southEast, @northWest), 4326)) ORDER BY concat(name, ' ', type, ' ', state) LIMIT 20;
func (z zoneDo) ShowVisibleZones(southEast models.Geometry, northWest models.Geometry) (result []*models.Zone, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, southEast)
	params = append(params, northWest)
	generateSQL.WriteString("SELECT * FROM zones WHERE type='county' AND ST_Intersects(border, ST_SetSRID(ST_MakeBox2D(?, ?), 4326)) ORDER BY concat(name, ' ', type, ' ', state) LIMIT 20; ")

	var executeSQL *gorm.DB
	executeSQL = z.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT id FROM zones;
func (z zoneDo) ListIDs() (result []string, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT id FROM zones; ")

	var executeSQL *gorm.DB
	executeSQL = z.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT z2.id FROM zones z1 INNER JOIN zones z2 ON z1.border = z2.border WHERE z1.id IN (@zoneList);
func (z zoneDo) FindCongruentZones(zoneList []string) (result []string, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, zoneList)
	generateSQL.WriteString("SELECT z2.id FROM zones z1 INNER JOIN zones z2 ON z1.border = z2.border WHERE z1.id IN (?); ")

	var executeSQL *gorm.DB
	executeSQL = z.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT ST_Union(border) FROM zones WHERE id IN (@affectedZones);
func (z zoneDo) ResolveGeometry(affectedZones []string) (result *models.Geometry, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, affectedZones)
	generateSQL.WriteString("SELECT ST_Union(border) FROM zones WHERE id IN (?); ")

	var executeSQL *gorm.DB
	executeSQL = z.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (z zoneDo) Debug() IZoneDo {
	return z.withDO(z.DO.Debug())
}

func (z zoneDo) WithContext(ctx context.Context) IZoneDo {
	return z.withDO(z.DO.WithContext(ctx))
}

func (z zoneDo) ReadDB() IZoneDo {
	return z.Clauses(dbresolver.Read)
}

func (z zoneDo) WriteDB() IZoneDo {
	return z.Clauses(dbresolver.Write)
}

func (z zoneDo) Session(config *gorm.Session) IZoneDo {
	return z.withDO(z.DO.Session(config))
}

func (z zoneDo) Clauses(conds ...clause.Expression) IZoneDo {
	return z.withDO(z.DO.Clauses(conds...))
}

func (z zoneDo) Returning(value interface{}, columns ...string) IZoneDo {
	return z.withDO(z.DO.Returning(value, columns...))
}

func (z zoneDo) Not(conds ...gen.Condition) IZoneDo {
	return z.withDO(z.DO.Not(conds...))
}

func (z zoneDo) Or(conds ...gen.Condition) IZoneDo {
	return z.withDO(z.DO.Or(conds...))
}

func (z zoneDo) Select(conds ...field.Expr) IZoneDo {
	return z.withDO(z.DO.Select(conds...))
}

func (z zoneDo) Where(conds ...gen.Condition) IZoneDo {
	return z.withDO(z.DO.Where(conds...))
}

func (z zoneDo) Order(conds ...field.Expr) IZoneDo {
	return z.withDO(z.DO.Order(conds...))
}

func (z zoneDo) Distinct(cols ...field.Expr) IZoneDo {
	return z.withDO(z.DO.Distinct(cols...))
}

func (z zoneDo) Omit(cols ...field.Expr) IZoneDo {
	return z.withDO(z.DO.Omit(cols...))
}

func (z zoneDo) Join(table schema.Tabler, on ...field.Expr) IZoneDo {
	return z.withDO(z.DO.Join(table, on...))
}

func (z zoneDo) LeftJoin(table schema.Tabler, on ...field.Expr) IZoneDo {
	return z.withDO(z.DO.LeftJoin(table, on...))
}

func (z zoneDo) RightJoin(table schema.Tabler, on ...field.Expr) IZoneDo {
	return z.withDO(z.DO.RightJoin(table, on...))
}

func (z zoneDo) Group(cols ...field.Expr) IZoneDo {
	return z.withDO(z.DO.Group(cols...))
}

func (z zoneDo) Having(conds ...gen.Condition) IZoneDo {
	return z.withDO(z.DO.Having(conds...))
}

func (z zoneDo) Limit(limit int) IZoneDo {
	return z.withDO(z.DO.Limit(limit))
}

func (z zoneDo) Offset(offset int) IZoneDo {
	return z.withDO(z.DO.Offset(offset))
}

func (z zoneDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IZoneDo {
	return z.withDO(z.DO.Scopes(funcs...))
}

func (z zoneDo) Unscoped() IZoneDo {
	return z.withDO(z.DO.Unscoped())
}

func (z zoneDo) Create(values ...*models.Zone) error {
	if len(values) == 0 {
		return nil
	}
	return z.DO.Create(values)
}

func (z zoneDo) CreateInBatches(values []*models.Zone, batchSize int) error {
	return z.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (z zoneDo) Save(values ...*models.Zone) error {
	if len(values) == 0 {
		return nil
	}
	return z.DO.Save(values)
}

func (z zoneDo) First() (*models.Zone, error) {
	if result, err := z.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Zone), nil
	}
}

func (z zoneDo) Take() (*models.Zone, error) {
	if result, err := z.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Zone), nil
	}
}

func (z zoneDo) Last() (*models.Zone, error) {
	if result, err := z.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Zone), nil
	}
}

func (z zoneDo) Find() ([]*models.Zone, error) {
	result, err := z.DO.Find()
	return result.([]*models.Zone), err
}

func (z zoneDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Zone, err error) {
	buf := make([]*models.Zone, 0, batchSize)
	err = z.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (z zoneDo) FindInBatches(result *[]*models.Zone, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return z.DO.FindInBatches(result, batchSize, fc)
}

func (z zoneDo) Attrs(attrs ...field.AssignExpr) IZoneDo {
	return z.withDO(z.DO.Attrs(attrs...))
}

func (z zoneDo) Assign(attrs ...field.AssignExpr) IZoneDo {
	return z.withDO(z.DO.Assign(attrs...))
}

func (z zoneDo) Joins(fields ...field.RelationField) IZoneDo {
	for _, _f := range fields {
		z = *z.withDO(z.DO.Joins(_f))
	}
	return &z
}

func (z zoneDo) Preload(fields ...field.RelationField) IZoneDo {
	for _, _f := range fields {
		z = *z.withDO(z.DO.Preload(_f))
	}
	return &z
}

func (z zoneDo) FirstOrInit() (*models.Zone, error) {
	if result, err := z.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Zone), nil
	}
}

func (z zoneDo) FirstOrCreate() (*models.Zone, error) {
	if result, err := z.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Zone), nil
	}
}

func (z zoneDo) FindByPage(offset int, limit int) (result []*models.Zone, count int64, err error) {
	result, err = z.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = z.Offset(-1).Limit(-1).Count()
	return
}

func (z zoneDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = z.Count()
	if err != nil {
		return
	}

	err = z.Offset(offset).Limit(limit).Scan(result)
	return
}

func (z zoneDo) Scan(result interface{}) (err error) {
	return z.DO.Scan(result)
}

func (z zoneDo) Delete(models ...*models.Zone) (result gen.ResultInfo, err error) {
	return z.DO.Delete(models)
}

func (z *zoneDo) withDO(do gen.Dao) *zoneDo {
	z.DO = *do.(*gen.DO)
	return z
}
